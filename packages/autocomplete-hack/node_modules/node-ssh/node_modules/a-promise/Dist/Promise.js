

"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

// State:Pending = 0
// State:Success = 1
// State:Failure = 2

var Promise = (function () {
  function Promise(Callback, Skip) {
    var _this = this;

    _classCallCheck(this, Promise);

    this.State = 0;
    this.OnError = [];
    this.OnSuccess = [];
    this.Result = null;
    if (!Skip) {
      (function () {
        var Me = _this;
        setTimeout(function () {
          Callback(function (Result) {
            Me.resolve(Result);
          }, function (Result) {
            Me.reject(Result);
          });
        }, 0);
      })();
    }
  }

  _createClass(Promise, {
    onError: {
      value: function onError(Callback) {
        if (this.State === 0) this.OnError.push(Callback);else if (this.State === 2) Callback(this.Result);
      }
    },
    onSuccess: {
      value: function onSuccess(Callback) {
        if (this.State === 0) this.OnSuccess.push(Callback);else if (this.State === 1) Callback(this.Result);
      }
    },
    resolve: {
      value: function resolve(Value) {
        var _this = this;

        if (this.State === 0) {
          this.State = 1;
          if (Value && Value.then) {
            (function () {
              var Me = _this;
              Value.then(function (Value) {
                Me.Result = Value;
                Me.OnSuccess.forEach(function (OnSuccess) {
                  OnSuccess(Value);
                });
              });
            })();
          } else {
            this.Result = Value;
            this.OnSuccess.forEach(function (OnSuccess) {
              OnSuccess(Value);
            });
          }
        }
      }
    },
    reject: {
      value: function reject(Value) {
        var _this = this;

        if (this.State === 0) {
          this.State = 2;
          if (Value && Value.then) {
            (function () {
              var Me = _this;
              Value.then(function (Value) {
                Me.Result = Value;
                Me.OnError.forEach(function (OnSuccess) {
                  OnSuccess(Value);
                });
              });
            })();
          } else {
            this.Result = Value;
            this.OnError.forEach(function (OnSuccess) {
              OnSuccess(Value);
            });
          }
        }
      }
    },
    then: {
      value: function then(CallbackS, CallbackE) {
        var Instance = new Promise(null, true);
        this.onSuccess(function (Value) {
          if (typeof CallbackS === "function") Instance.resolve(CallbackS(Value));else Instance.resolve(Value);
        });
        this.onError(function (Value) {
          if (typeof CallbackE === "function") Instance.resolve(CallbackE(Value));else Instance.reject(Value);
        });
        return Instance;
      }
    },
    "catch": {
      value: function _catch(CallbackE) {
        var Instance = new Promise(null, true);
        this.onSuccess(function (Value) {
          Instance.resolve(Value);
        });
        this.onError(function (Value) {
          if (typeof CallbackE === "function") Instance.resolve(CallbackE(Value));else Instance.reject(Value);
        });
        return Instance;
      }
    }
  }, {
    defer: {
      value: function defer() {
        var Instance = new Promise(null, true);
        return {
          promise: Instance,
          resolve: function resolve(Value) {
            Instance.resolve(Value);
          },
          reject: function reject(Value) {
            Instance.reject(Value);
          }
        };
      }
    },
    all: {
      value: function all(Iterable) {
        if (typeof Iterable === "undefined") throw new Error("Promise.all expects parameter one to be an iterable");
        var Instance = new Promise(null, true);
        var Promises = [];
        var ToReturn = [];
        var Number = 0;
        for (var Index in Iterable) {
          var Val = Iterable[Index];
          if (Val && Val.then) Promises[Number] = Val;else ToReturn[Number] = Val;
          ++Number;
        }
        if (Number === ToReturn.length) Instance.resolve(ToReturn);
        Promises.forEach(function (Value, Index) {
          Value.then(function (TheVal) {
            ToReturn[Index] = TheVal;
            if (Number === ToReturn.length) Instance.resolve(ToReturn);
          });
        });
        return Instance;
      }
    },
    resolve: {
      value: function resolve(Value) {
        var Instance = new Promise(null, true);
        Instance.State = 1;
        Instance.Result = Value;
        return Instance;
      }
    },
    reject: {
      value: function reject(Value) {
        var Instance = new Promise(null, true);
        Instance.State = 2;
        Instance.Result = Value;
        return Instance;
      }
    }
  });

  return Promise;
})();

module.exports = Promise;